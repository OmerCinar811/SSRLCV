#!/bin/bash
cd $(dirname "${BASH_SOURCE[0]}")


# Test counters 
ctPass=0
ctFail=0

function check-source 
{ 
    # Check for tests that no longer have corresponding source files
    # These tests were likely deleted 
    exe=$1 
    src=${exe##*/}
    if    [[ "$exe" == *"bin/cu/$src" ]]; then src="src/$src.cu"; 
    elif  [[ "$exe" == *"bin/cu/$src" ]]; then src="src/$src.cpp";
    else return; fi
    if [ ! -e "$src" ]; then echo "[!] $exe does not have a corresponding file $src"; fi
}

function run-tests
{
  # Runs all executables in the given list of files
  # Very, extremely secure 

  for exe in "$@"; do
    # Ignore anything that's not an executable 
    # Also a good  https://stackoverflow.com/a/43606356
    [ -x "$exe" ] || continue

    # Running the test - we do it in the {} wrapper so that it doesn't confuse the shell's stderr with that of the program itself.
    # This supresses things like "core dumped" messages after segfaults 
    { $exe 2>&1; } > /tmp/tegra-test-output.txt 2> /dev/null

    if [ $? -ne 0 ]; then
      let "ctFail++"
      echo "[!] $exe failed.  Output:"
      cat /tmp/tegra-test-output.txt
      echo 
    else
      let "ctPass++"
      echo "[ ] $exe passed."
    fi

    check-source $exe # see above
  done
}


echo
echo "--------------------"
echo "Running C++ tests..."
echo "--------------------"
echo
run-tests ./bin/cpp/*


echo
echo "---------------------"
echo "Running CUDA tests..."
echo "---------------------"
echo
run-tests ./bin/cu/*

echo
echo "---------------------"
echo "Running bash tests..."
echo "---------------------"
echo
run-tests ./bash/*

#
# Results
#


let "total=ctPass+ctFail"

echo
echo "--  --  --  --  --  --  --  --"
if [[ $ctFail == 0 ]]; then
  echo "All $total test(s) passed."
  exit 0
elif [[ $total == 0 ]]; then
  echo "No tests were run."
  exit 0
else
  let passpct="$ctPass * 100 / $total"
  echo "$ctPass of $total tests passed [$passpct%, $ctFail failures]"
  exit 1
fi
